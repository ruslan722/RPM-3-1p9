from typing import List, Optional  # Импортируем типы для аннотаций (списки и необязательные значения)
from fastapi import FastAPI  # Импортируем FastAPI для создания веб-приложения
from pydantic import BaseModel  # Импортируем BaseModel для валидации данных
import uvicorn  # Импортируем uvicorn для запуска сервера

app = FastAPI()  # Создаём экземпляр приложения FastAPI

# Классы для данных
class Student(BaseModel):  # Определяем модель данных для студента
    name: str  # Имя студента
    age: int  # Возраст студента
    grades: Optional[List[int]] = None  # Список оценок (может быть пустым)

# "База данных" в памяти
db = {  # Имитация базы данных в виде словаря
    1: {  # Первый студент с ID = 1
        "name": "Алиса",  # Имя студента
        "age": 22,  # Возраст студента
        "grades": [85, 90]  # Список оценок студента
    },
    2: {  # Второй студент с ID = 2
        "name": "Боб",  # Имя студента
        "age": 23,  # Возраст студента
        "grades": [78, 88, 92]  # Список оценок студента
    }
}

# Эндпоинт для получения всех студентов
@app.get("/students/")  # Обрабатывает GET-запросы по адресу "/students/"
async def get_students():  # Асинхронная функция для получения всех студентов
    return db  # Возвращает весь словарь с данными студентов

# Эндпоинт для получения одного студента по ID
@app.get("/students/{student_id}")  # Обрабатывает GET-запросы по адресу "/students/{student_id}"
async def get_student(student_id: int):  # Асинхронная функция для получения студента по ID
    if student_id in db:  # Проверяет, есть ли студент с таким ID в базе
        return db[student_id]  # Возвращает данные студента
    return {"ошибка": "Студент с таким ID не найден"}  # Возвращает ошибку, если ID нет в базе

# Эндпоинт для добавления нового студента
@app.post("/students/")  # Обрабатывает POST-запросы по адресу "/students/"
async def create_student(student: Student):  # Асинхронная функция для создания нового студента
    new_student_id = max(db.keys()) + 1  # Генерирует новый ID для студента
    db[new_student_id] = student.dict()  # Добавляет студента в базу, преобразуя объект в словарь
    return {"сообщение": "Студент добавлен", "id": new_student_id}  # Возвращает подтверждение добавления

# Эндпоинт для обновления информации о студенте
@app.put("/students/{student_id}")  # Обрабатывает PUT-запросы по адресу "/students/{student_id}"
async def update_student(student_id: int, student: Student):  # Асинхронная функция для обновления данных студента
    if student_id in db:  # Проверяет, есть ли студент с таким ID
        db[student_id] = student.dict()  # Обновляет данные студента
        return {"сообщение": "Данные студента обновлены"}  # Возвращает подтверждение обновления
    return {"ошибка": "Студент с таким ID не найден"}  # Возвращает ошибку, если ID нет в базе

# Эндпоинт для удаления студента
@app.delete("/students/{student_id}")  # Обрабатывает DELETE-запросы по адресу "/students/{student_id}"
async def delete_student(student_id: int):  # Асинхронная функция для удаления студента
    if student_id in db:  # Проверяет, есть ли студент с таким ID
        del db[student_id]  # Удаляет студента из базы
        return {"сообщение": "Студент удалён"}  # Возвращает подтверждение удаления
    return {"ошибка": "Студент с таким ID не найден"}  # Возвращает ошибку, если ID нет в базе

# Эндпоинт для добавления оценки студенту
@app.put("/students/{student_id}/grades")  # Обрабатывает PUT-запросы по адресу "/students/{student_id}/grades"
async def add_grade(student_id: int, grade: int):  # Асинхронная функция для добавления оценки студенту
    if student_id in db:  # Проверяет, есть ли студент с таким ID
        if "grades" not in db[student_id]:  # Если у студента ещё нет списка оценок
            db[student_id]["grades"] = []  # Создаёт пустой список оценок
        db[student_id]["grades"].append(grade)  # Добавляет новую оценку в список
        return {"сообщение": "Оценка добавлена", "оценки": db[student_id]["grades"]}  # Возвращает подтверждение
    return {"ошибка": "Студент с таким ID не найден"}  # Возвращает ошибку, если ID нет в базе

# Запуск сервера
if __name__ == "__main__":  # Проверяет, что скрипт запущен напрямую
    uvicorn.run(app, host="127.0.0.1", port=8000)  # Запускает сервер на локальном хосте с портом 8000
